use rand::Rng; 
use crate::FrameBuffer;

impl FrameBuffer {
    pub fn randomize_patterns(&mut self) {
        let still_lifes = vec![
            vec![
                "00000",
                "00100",
                "00010",
                "11110",
                "00000",
            ],
            vec![
                "00000",
                "00110",
                "00110",
                "00000",
                "00000",
            ],
            // Bee-hive
            vec![
                "000000",
                "001100",
                "010010",
                "001100",
                "000000",
            ],
            // Block
            vec![
                "00000",
                "00110",
                "00110",
                "00000",
                "00000",
            ],
            // Loaf
            vec![
                "00000",
                "001100",
                "010010",
                "010100",
                "001000",
                "000000",
            ],
            // Boat
            vec![
                "00000",
                "00110",
                "01010",
                "00101",
                "00000",
            ],
            // Tub
            vec![
                "00000",
                "00100",
                "01010",
                "00100",
                "00000",
            ],
        ];

        let oscillators = vec![
            // Blinkers
            vec![
                "00000",
                "01110",
                "00000",
                "00000",
                "00000",
            ],
            // Toad
            vec![
                "00000",
                "000111",
                "111000",
                "00000",
                "00000",
            ],
            // Beacon
            vec![
                "00000",
                "001100",
                "001100",
                "110000",
                "110000",
            ],
            // Pulsar (period 3)
            vec![
                "0000000000000000",
                "0000000100000000",
                "0000000100000000",
                "0000000100000000",
                "0000000100000000",
                "0000000000000000",
                "0000000000000000",
                "0000000100000000",
                "0000000100000000",
                "0000000100000000",
                "0000000100000000",
                "0000000000000000",
                "0000000000000000",
                "0000000000000000",
                "0000000000000000",
                "0000000000000000",
            ],
        ];

        let spaceships = vec![
            // Glider
            vec![
                "00000",
                "00100",
                "00010",
                "11110",
                "00000",
            ],
            // Lightweight Spaceship
            vec![
                "0000000",
                "0001000",
                "0011100",
                "0001000",
                "0000000",
            ],
            // Middleweight Spaceship
            vec![
                "0000000000",
                "0000001000",
                "0000111100",
                "0001000000",
                "0001000000",
                "0000111100",
                "0000001000",
                "0000000000",
            ],
            // Heavyweight Spaceship
            vec![
                "000000000000000",
                "000000000010000",
                "000000000111000",
                "000000000010000",
                "000000000010000",
                "000000000111000",
                "000000000000000",
            ],
            // Penta Decathlon (period 15)
            vec![
                "0000000000000000000",
                "0000000000000000000",
                "0000000001110000000",
                "0000000001110000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
                "0000000000000000000",
            ],
        ];

        let mut rng = rand::thread_rng();
        let patterns = vec![&still_lifes, &oscillators, &spaceships];
        
        for _ in 0..10 {
            let pattern_type = rng.gen_range(0..patterns.len());
            let pattern = &patterns[pattern_type][rng.gen_range(0..patterns[pattern_type].len())];

            let pattern_height = pattern.len();
            let pattern_width = pattern[0].len();
            let start_x = rng.gen_range(0..self.width.saturating_sub(pattern_width));
            let start_y = rng.gen_range(0..self.height.saturating_sub(pattern_height));

            for (y, row) in pattern.iter().enumerate() {
                for (x, cell) in row.chars().enumerate() {
                    if cell == '1' {
                        self.point(start_x + x, start_y + y);
                    }
                }
            }
        }
    }
}
